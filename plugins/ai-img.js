const { cmd } = require("../command");
const axios = require("axios");


cmd({
  pattern: "aiimg",
  react: "🚀",
  desc: "Generate an image using AI.",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  try {
    if (!q) return reply("Please provide a prompt for the image.");

    await reply("> *CREATING IMAGE ...🔥*");

    const apiUrl = `https://lance-frank-asta.onrender.com/api/art?prompt=${encodeURIComponent(q)}`;

    // API eka image binary data widiyata ganna
    const response = await axios.get(apiUrl, { responseType: "arraybuffer" });

    if (!response || !response.data) {
      return reply("Error: The API did not return a valid image. Try again later.");
    }

    const imageBuffer = Buffer.from(response.data, "binary");

    // Send image as buffer
    await conn.sendMessage(m.chat, {
      image: imageBuffer,
      caption: `💸 *Imagine Generated By 𝙳𝙰𝚁𝙺-𝙺𝙽𝙸𝙶𝙷𝚃-𝚇𝙼𝙳* 🚀\n✨ Prompt: *${q}*`
    });

  } catch (error) {
    console.error("AiImgage Error:", error);
    reply(`An error occurred: ${error.response?.data?.message || error.message || "Unknown error"}`);
  }
});


cmd({
  pattern: "aiimg1",
  react: "🚀",
  desc: "Generate multiple images using AI.",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  try {
    if (!q) return reply("Please provide a prompt for the image.");

    await reply("> *CREATING IMAGES ...🔥*");

    const apiUrl = `https://api-aswin-sparky.koyeb.app/api/search/imageai?search=${encodeURIComponent(q)}`;

    const response = await axios.get(apiUrl);

    if (!response || !response.data || !response.data.data || !response.data.data.length) {
      return reply("Error: The API did not return any images. Try again later.");
    }

    const images = response.data.data;

    // Send each image one by one
    for (const imageUrl of images) {
      await conn.sendMessage(m.chat, {
        image: { url: imageUrl },
        caption: `💸 *Imagine Generated By 𝙳𝙰𝚁𝙺-𝙺𝙽𝙸𝙶𝙷𝚃-𝚇𝙼𝙳* 🚀\n✨ Prompt: *${q}*`
      });
    }

  } catch (error) {
    console.error("AiImage Error:", error);
    reply(`An error occurred: ${error.response?.data?.message || error.message || "Unknown error"}`);
  }
});


cmd({
  pattern: "aiimg2",
  react: "🚀",
  desc: "Generate an image using AI (Direct Image API - Malvin CreArt).",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  try {
    if (!q) {
      return reply("⚠️ Please provide a prompt for the image.\n\nExample: *.aiimg Dog wearing sunglasses*");
    }

    await reply("> 🧠 *Creating AI Image... Please wait!* 🔥");

    // API endpoint (direct image)
    const apiUrl = `https://malvin-api.vercel.app/ai/creart/image?prompt=${encodeURIComponent(q)}`;

    // Fetch image as binary
    const response = await axios.get(apiUrl, { responseType: "arraybuffer" });

    if (!response || !response.data) {
      return reply("❌ The API did not return an image. Try again later.");
    }

    // Convert to buffer
    const imageBuffer = Buffer.from(response.data, "binary");

    // Send generated image
    await conn.sendMessage(m.chat, {
      image: imageBuffer,
      caption: `💫 *AI Image Generated by 𝙳𝙰𝚁𝙺-𝙺𝙽𝙸𝙶𝙷𝚃-𝚇𝙼𝙳* 🚀\n\n🎨 *Prompt:* ${q}`
    });

  } catch (error) {
    console.error("AiImage Error:", error);
    reply(`❌ Error: ${error.response?.statusText || error.message || "Unknown error occurred"}`);
  }
});


cmd({
  pattern: "aiimg3",
  react: "🚀",
  desc: "Generate AI image using DeepIMG (Malvin API).",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  try {
    if (!q) {
      return reply("⚠️ Please provide a prompt for the image.\n\nExample: *.aiimg3 query in space*");
    }

    await reply("> 🧠 *Generating image with DeepIMG... please wait!* 🔥");

    // Default style
    const style = "img"; // you can change or later make dynamic

    // API endpoint
    const apiUrl = `https://malvin-api.vercel.app/ai/deepimg?prompt=${encodeURIComponent(q)}&style=${encodeURIComponent(style)}`;

    const response = await axios.get(apiUrl);

    if (!response.data || !response.data.status || !response.data.image_url) {
      return reply("❌ The API did not return a valid image. Try again later.");
    }

    const { image_url, model, dimensions } = response.data;

    // Send generated image
    await conn.sendMessage(m.chat, {
      image: { url: image_url },
      caption: `💫 *Image Generated by 𝙳𝙰𝚁𝙺-𝙺𝙽𝙸𝙶𝙷𝚃-𝚇𝙼𝙳* 🚀\n\n🎨 *Prompt:* ${q}\n🧩 *Style:* ${style}\n📸 *Model:* ${model}\n📏 *Size:* ${dimensions}`
    });

  } catch (error) {
    console.error("AiImage Error:", error);
    reply(`❌ An error occurred: ${error.response?.data?.message || error.message || "Unknown error"}`);
  }
});


cmd({
  pattern: "aianime",
  react: "🎨",
  desc: "Get a random anime image.",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { reply }) => {
  try {
    await reply("> *FETCHING RANDOM ANIME IMAGE...✨*");

    const apiUrl = "https://lance-frank-asta.onrender.com/api/anime-random";

    const response = await axios.get(apiUrl);

    if (!response.data?.status || !response.data.random?.imgAnime) {
      return reply("Error: Could not fetch an anime image. Try again later.");
    }

    const anime = response.data.random;

    await conn.sendMessage(m.chat, {
      image: { url: anime.imgAnime },
      caption: `💫 *Random Anime Image*\n👤 Name: ${anime.name}\n🎬 Movie/Anime: ${anime.movie}\n🎨 Color: ${anime.colorBg}`
    });

  } catch (error) {
    console.error("AnimeImage Error:", error);
    reply(`An error occurred: ${error.response?.data?.message || error.message || "Unknown error"}`);
  }
});
